swagger: "2.0"
info:
  version: "1.0.0"
  title: "Vehicle Maintenance App"
  
host: "api.vehiclemaintenanceapp.com"
basePath: "/api/v1"

tags:
  - name: Vehicle
    description: API for managing vehicles
  - name: Customer
    description: API for managing customers
  - name: Intervention
    description: API for managing inteventions    
  - name: Authentication

schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: Authorization

definitions:
  Customer:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: "1234"
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        example: "johndoe@example.com"
      vehicles:
        type: array
        items:
          $ref: '#/definitions/Vehicle'      
  
  Vehicle:
    type: object
    required:
      - 'kilometri'
      - 'licensePlate'
      - 'model'
    properties:
      id:
        type: string
        format: uuid
        example: "5678"
      brand:
        type: string
        example: "Toyota"
      model:
        type: string
        example: "Corolla"
      year:
        type: integer
        example: 2018
      color:
        type: string
        example: "black"
      licensePlate:
        type: string
        example: "AB123CD"
      image:
        type: string
        description: "URL Image of the vehicle in JPG, PNG, or GIF format"
      kilometri:
        type: integer
        format: uint64
        minLength: 1
        description: "Kilometri of Vehicle"
      customer:
        $ref: '#/definitions/Customer'

  Intervention:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: "7890"
      dateIntervention:
        type: string
        format: date-time
        example: "2023-04-08T10:30:00Z"
      services:
        type: array
        items:
          $ref: '#/definitions/Service'
      note:
        type: string
        example: "Replaced oil and filter"
      idVehicle:
        type: string
        format: uuid
      
  ErrorModel:
    type: object
    required:
      - "errorCode"
      - "errorMessage"
    properties:
      errorCode: 
        type: string
      errorMessage:
        type: string
      errors:
        type: object
        additionalProperties:
          type: object
        
  LoginRequest:
    type: object
    required:
      - "username"
      - "password"
    properties:
      id:
        type: string
        format: uuid
      username: 
        type: string
      password:
        type: string
      phone:
        type: string
      email:
        type: string
      roles:
        type: array
        items:
          type: string

  SignupRequest:
    type: object
    required:
      - "username"
      - "password"
    properties:
      id:
        type: string
        format: uuid
      username: 
        type: string
      password:
        type: string
      phone:
        type: string
      email:
        type: string
      roles:
        type: array
        items:
          type: string
        
  UserInfoResponse:
    type: object
    properties:
      id: 
        type: string
        format: uuid
      username:
        type: string
      email: 
        type: string
      phone: 
        type: string
      roles:
        type: array
        items:
          type: string
          
  JWTResponse:
    type: object
    properties:
      jwt:
        type: string
        
  Service:
    type: object
    properties:
      id: 
        type: string
        format: uuid
      serviceName:
        type: string
        description: "Name of service intervention"
      duration:
        type: integer
        description: "Duration of service"
      price:
        type: integer


paths:
  /customers:
    get:
      summary: Get all customers
      description: Retrieves a list of all customers
      tags:
        - Customer
      operationId: getAllCustomers
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
        401:
          description: Unauthorized
      security:
        - ApiKeyAuth: []
        
  /customers/{customerId}:
    get:
      summary: Get customer details
      description: Retrieves detailed information about a specific customer
      tags:
        - Customer
      operationId: getCustomerDetails
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to retrieve
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Customer'
        401:
          description: Unauthorized
        404:
          description: customer not found

  /customers/{customerId}/vehicles:
    get:
      summary: Get vehicles for a specific customer
      description: Retrieves a list of all vehicles associated with a specific customer
      tags:
        - Customer
      operationId: getVehicleSpecificCustomer
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to retrieve vehicles for
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Customer'
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  
  /interventions/customers/{customerId}/vehicles/{vehicleId}:
    post:
      summary: Adds a new intervention for a specific vehicle of a specific customer
      tags:
        - Intervention
      operationId: createNewIntervention
      parameters:
        - name: customerId
          in: path
          description: ID of the customer that the vehicle is associated with
          required: true
          type: string
        - name: vehicleId
          in: path
          description: ID of the vehicle that the intervention is associated with
          required: true
          type: string
        - name: intervention
          in: body
          description: Intervention details
          required: true
          schema:
            $ref: '#/definitions/Intervention'
      responses:
        201:
          description: Intervention successfully added
          schema:
            $ref: '#/definitions/Intervention'
        400:
          description: Invalid request body
        404:
          description: customer or vehicle not found
          
  /interventions/{interventionId}:
    put:
      summary: Updates an existing intervention for a specific vehicle of a specific customer
      tags:
        - Intervention
      operationId: updateIntervention
      parameters:
        - name: interventionId
          in: path
          description: ID of the intervention to update
          required: true
          type: string
        - name: intervention
          in: body
          description: Intervention details to update
          required: true
          schema:
            $ref: '#/definitions/Intervention'
      responses:
        200:
          description: Intervention successfully updated
          schema:
            $ref: '#/definitions/Intervention'          
        400:
          description: Invalid request body
        404:
          description: customer, vehicle, or intervention not found
          
    delete:
      summary: Deletes an existing intervention for a specific vehicle of a specific customer
      tags:
        - Intervention
      operationId: deleteIntervention
      parameters:
        - name: interventionId
          in: path
          description: ID of the intervention to delete
          required: true
          type: string
      responses:
        204:
          description: Intervention successfully deleted
        404:
          description: customer, vehicle, or intervention not

  /interventions:
    get:
      summary: Get list of intervention
      tags:
        - Intervention
      operationId: listOfIntervention
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Intervention'
          
  /vehicle/customer/{customerId}/create:
    post:
      tags:
        - Vehicle
      summary: Create new Vehicle associated to Customer
      operationId: createVehicle
      parameters:
        - name: customerId
          in: path
          description: ID of the customer that the vehicle is associated with
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Vehicle'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        400:
          description: BadRequest
          schema:
            $ref: '#/definitions/ErrorModel'
            
  /vehicle/{vehicleId}:
    put:
      summary: Updates an existing vehicle of a specific customer
      tags:
        - Vehicle
      operationId: updateVehicle
      parameters:
        - name: vehicleId
          in: path
          description: ID of the vehicle that the intervention is associated with
          required: true
          type: string
        - name: vehicle
          in: body
          description: Vehicle details to update
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        200:
          description: Vehicle successfully updated
          schema:
            $ref: '#/definitions/Vehicle'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
            
    get:
      summary: Get specific vehicle by ID
      tags:
        - Vehicle
      operationId: retrieveVehicle
      parameters:
        - name: vehicleId
          in: path
          description: ID of the vehicle that the intervention is associated with
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Vehicle'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
            
  /vehicle:
    get:
      summary: Get list of vehicle
      tags:
        - Vehicle
      operationId: listOfVehicle
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
            
  /service:
    post:
      summary: Create new service of intervention
      tags:
        - Service
      operationId: createService
      parameters:
        - name: service
          in: body
          description: Service details to update
          required: true
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Service'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
    
    get:
      summary: Get list of services
      tags:
        - Service
      operationId: getAllServices
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
             $ref: '#/definitions/Service'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
  
  /service/{idService}:
    get:
      summary: Get list of services
      tags:
        - Service
      operationId: getServiceById
      parameters:
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string      
      responses:
        200:
          description: Success
          schema:
           $ref: '#/definitions/Service'
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
    
    delete:
      summary: Delete service by id
      tags:
        - Service
      operationId: deleteServiceById
      parameters:
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string      
      responses:
        200:
          description: Success
        400:
          description: Invalid request body
          schema:
            $ref: '#/definitions/ErrorModel'          
        404:
          description: vehicle not found
          schema:
            $ref: '#/definitions/ErrorModel'
        500:
          description: generic error
          schema:
            $ref: '#/definitions/ErrorModel'
      
      
        
            
          
  /authentication/signin:
    post:
      tags:
        - Authentication
      summary: Login API
      operationId: login
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/JWTResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        400:
          description: BadRequest
          schema:
            $ref: '#/definitions/ErrorModel'
            
  /authentication/signup:
    post:
      tags:
        - Authentication
      summary: Signup API
      operationId: signup
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SignupRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/UserInfoResponse'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        400:
          description: BadRequest
          schema:
            $ref: '#/definitions/ErrorModel'
            
  /authentication/signout:
    post:
      tags:
        - Authentication
      summary: Signout API
      operationId: signout
      responses:
        200:
          description: Success
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'